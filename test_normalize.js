// Test the normalizeMermaidContent function with our diagram\nconst fs = require('fs');\n\n// Copy the normalizeMermaidContent function from lib/markdown.js\nconst normalizeMermaidContent = (content) => {\n  // Remove metadata sections\n  if (content.includes('**Diagram sources**') || \n      content.includes('**Section sources**')) {\n    const sourcesIndex = Math.min(\n      content.includes('**Diagram sources**') ? content.indexOf('**Diagram sources**') : Number.MAX_SAFE_INTEGER,\n      content.includes('**Section sources**') ? content.indexOf('**Section sources**') : Number.MAX_SAFE_INTEGER\n    );\n    \n    if (sourcesIndex !== Number.MAX_SAFE_INTEGER) {\n      content = content.substring(0, sourcesIndex).trim();\n    }\n  }\n  \n  // Handle style directives\n  if (content.includes('style ')) {\n    const styleMatch = content.match(/([\\s\\S]*?)\\bstyle\\s+[A-Za-z0-9_-]+/);\n    if (styleMatch && styleMatch[1]) {\n      content = styleMatch[1].trim();\n    } else {\n      content = content.replace(/\\bstyle\\s+[A-Za-z0-9_-]+\\s+[^\\n]+/g, '');\n    }\n  }\n  \n  // Handle round bracket nodes\n  content = content.replace(/([A-Za-z0-9_-]+)\\$\\$[^\\]]+\\$\\$/g, '$1([\"$2\"])');\n  \n  // Handle alphanumeric node identifiers\n  content = content.replace(/([A-Za-z0-9_-]+)\\$\\$[^\\]]+\\$\\$\\s+(-->|->)\\s+([A-Za-z0-9_-]+)/g, '$1[$2]\\n$1 $3 $4');\n  \n  // Standardize arrow syntax\n  content = content.replace(/->/g, '-->');\n  \n  // Add line breaks between nodes\n  content = content.replace(/([A-Za-z0-9_-]+)\\$\\$[^\\]]+\\$\\$\\s+([A-Za-z0-9_-]+)\\$\\$/g, '$1[$2]\\n$3[');\n  \n  // Handle edge labels\n  content = content.replace(/([A-Za-z0-9_-]+)\\s+-->\\s+\\|([^|]+)\\|\\s+([A-Za-z0-9_-]+)/g, '$1 -->|$2| $3');\n  \n  // Ensure diagram type is declared\n  if (!content.match(/^\\s*(graph|flowchart|sequenceDiagram|classDiagram|stateDiagram|pie|gantt|journey|requirementDiagram|gitGraph|erDiagram|quadrantChart)/)) {\n    if (content.includes('-->') || content.includes('-->|')) {\n      content = 'flowchart TD\\n' + content;\n    } else {\n      content = 'graph TD\\n' + content;\n    }\n  }\n  \n  // Clean up whitespace\n  content = content.replace(/\\s{2,}/g, ' ').trim();\n  \n  return content;\n};\n\n// Extract the diagram content\nconst content = fs.readFileSync('docs/Action System/Action Exceptions.md', 'utf-8');\nconst start = content.indexOf('```mermaid');\nconst end = content.indexOf('```', start + 10);\nconst diagramContent = content.substring(start + 10, end).trim();\n\nconsole.log(\"Original diagram content:\");\nconsole.log(diagramContent);\nconsole.log(\"\\n---\\n\");\n\n// Process it through the normalize function\nconst normalized = normalizeMermaidContent(diagramContent);\nconsole.log(\"Normalized diagram content:\");\nconsole.log(normalized);