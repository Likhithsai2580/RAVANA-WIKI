// Test the mermaid regex on our specific diagram\nconst mermaidRegex = /(?:```(?:\\s*\\n)?\\s*mermaid\\s*([\\s\\S]*?)```)|(?:`{1,3}mermaid\\s+([\\s\\S]*?)`{1,3})|(?:`{1,3}\\s*\\n\\s*mermaid\\s*([\\s\\S]*?)`{1,3})|(?:``(?:\\s*\\n)?\\s*(?:graph|flowchart|sequenceDiagram|classDiagram|stateDiagram|pie|gantt|journey|requirementDiagram|gitGraph|erDiagram|quadrantChart)\\s*([\\s\\S]*?)``)|(?:`{2}\\s*(?:graph|flowchart)\\s+TD\\s+[A-Za-z0-9_-]+(?:\\[[^\\]]+\\]|\\(\\[[^\\]]+\\]\\))\\s*(?:-->|->)([\\s\\S]*?)`{2})/gs;\n\n// Read the content of our file\nconst fs = require('fs');\nconst content = fs.readFileSync('docs/Action System/Action Exceptions.md', 'utf-8');\n\n// Find all mermaid diagrams\nlet match;\nlet count = 0;\nwhile ((match = mermaidRegex.exec(content)) !== null) {\n  count++;\n  console.log(`Match ${count}:`);\n  console.log(\"Full match:\", match[0]);\n  console.log(\"Group 1:\", match[1]);\n  console.log(\"Group 2:\", match[2]);\n  console.log(\"Group 3:\", match[3]);\n  console.log(\"Group 4:\", match[4]);\n  console.log(\"Group 5:\", match[5]);\n  console.log(\"---\");\n}\n\nconsole.log(`Total matches: ${count}`);