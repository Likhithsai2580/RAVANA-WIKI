{"pageProps":{"doc":{"slug":"Conversational AI Communication Framework","title":"Conversational AI Communication Framework","content":"<h1>Conversational AI Communication Framework</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#project-structure\">Project Structure</a></li>\n<li><a href=\"#core-components\">Core Components</a></li>\n<li><a href=\"#architecture-overview\">Architecture Overview</a></li>\n<li><a href=\"#detailed-component-analysis\">Detailed Component Analysis</a></li>\n<li><a href=\"#communication-message-structure\">Communication Message Structure</a></li>\n<li><a href=\"#integration-patterns\">Integration Patterns</a></li>\n<li><a href=\"#troubleshooting-guide\">Troubleshooting Guide</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ol>\n<h2>Introduction</h2>\n<p>The Conversational AI Communication Framework is a modular system designed to enable seamless interaction between AI agents and external platforms such as Discord and Telegram. It serves as a communication bridge between the main RAVANA system and user-facing interfaces, facilitating task delegation, emotional intelligence exchange, and real-time notifications. The framework supports multiple communication channels, prioritized messaging, and cross-platform user management, making it suitable for complex AI coordination scenarios.</p>\n<h2>Project Structure</h2>\n<p>The Conversational AI module is organized into distinct subdirectories based on functional responsibilities. This modular design enables clear separation of concerns and facilitates independent development and testing of components.</p>\n<pre><code class=\"language-mermaid\">graph TB\nsubgraph \"Conversational AI Module\"\nsubgraph \"bots\"\nDB[discord_bot.py]\nTB[telegram_bot.py]\nend\nsubgraph \"communication\"\nRB[ravana_bridge.py]\nDM[data_models.py]\nMSC[memory_service_channel.py]\nMQC[message_queue_channel.py]\nSSC[shared_state_channel.py]\nend\nsubgraph \"emotional_intelligence\"\nEI[conversational_ei.py]\nend\nsubgraph \"memory\"\nCHM[chat_history_manager.py]\nMI[memory_interface.py]\nend\nCFG[config.json]\nMAIN[main.py]\nend\nRB --> DM\nDB --> RB\nTB --> RB\nCHM --> RB\nEI --> RB\n</code></pre>\n<p><strong>Diagram sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n<li><a>modules/conversational_ai/bots/discord_bot.py</a></li>\n<li><a>modules/conversational_ai/bots/telegram_bot.py</a></li>\n</ul>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/config.json</a></li>\n<li><a>modules/conversational_ai/main.py</a></li>\n</ul>\n<h2>Core Components</h2>\n<p>The framework consists of several core components that work together to enable robust conversational AI capabilities:</p>\n<ul>\n<li><strong>RAVANACommunicator</strong>: Central communication bridge handling message routing between the AI system and external services</li>\n<li><strong>Communication Channels</strong>: Specialized channels for different types of data flow (memory service, shared state, message queue)</li>\n<li><strong>Platform Bots</strong>: Interface adapters for Discord and Telegram platforms</li>\n<li><strong>Emotional Intelligence Module</strong>: Handles mood processing and persona management</li>\n<li><strong>Memory System</strong>: Manages chat history and user context persistence</li>\n</ul>\n<p>These components are configured through a centralized JSON configuration file that defines platform settings, communication parameters, and emotional intelligence behavior.</p>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/config.json</a></li>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n</ul>\n<h2>Architecture Overview</h2>\n<p>The Conversational AI Communication Framework follows a layered architecture with clear separation between communication, processing, and presentation layers. The system acts as an intermediary between the main RAVANA AI system and user-facing messaging platforms.</p>\n<pre><code class=\"language-mermaid\">graph LR\nUser[End User] --> |Sends Message| Platform[Discord/Telegram]\nPlatform --> Bot[Platform Bot]\nBot --> Communicator[RAVANACommunicator]\nCommunicator --> RAVANA[RAVANA Main System]\nRAVANA --> |Response| Communicator\nCommunicator --> |Notification| Bot\nBot --> |Sends Message| Platform\nPlatform --> User\nsubgraph \"Communication Channels\"\nMSC[Memory Service Channel]\nSSC[Shared State Channel]\nMQC[Message Queue Channel]\nend\nCommunicator --> MSC\nCommunicator --> SSC\nCommunicator --> MQC\nMSC --> Memory[(Persistent Storage)]\nSSC --> State[(Real-time State)]\nMQC --> Queue[(Reliable Messaging)]\n</code></pre>\n<p><strong>Diagram sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n<li><a>modules/conversational_ai/communication/data_models.py</a></li>\n</ul>\n<h2>Detailed Component Analysis</h2>\n<h3>RAVANACommunicator Analysis</h3>\n<p>The RAVANACommunicator class serves as the central communication hub, managing all interactions between the conversational AI and the main RAVANA system. It implements a multi-channel communication strategy to ensure reliable message delivery.</p>\n<pre><code class=\"language-mermaid\">classDiagram\nclass RAVANACommunicator {\n+str channel\n+object conversational_ai\n+bool running\n+Queue message_queue\n+Event _shutdown\n+MemoryServiceChannel memory_service_channel\n+SharedStateChannel shared_state_channel\n+MessageQueueChannel message_queue_channel\n+Dict pending_tasks\n+__init__(channel : str, conversational_ai)\n+start() Coroutine\n+stop() Coroutine\n+_register_message_callbacks() void\n+_process_messages() Coroutine\n+_handle_message(message : Dict) Coroutine\n+_handle_task_result(message : Dict) Coroutine\n+_handle_notification(message : Dict) Coroutine\n+_handle_user_message_from_ravana(message : Dict) Coroutine\n+_handle_thought_exchange(message : Dict) Coroutine\n+_process_ravana_insight(content : Dict) Coroutine\n+_process_goal_adjustment(content : Dict) Coroutine\n+_process_collaboration_proposal(content : Dict) Coroutine\n+send_task_to_ravana(task : Dict) void\n+send_thought_to_ravana(thought : Dict) void\n+send_emotional_context_to_ravana(emotional_data : Dict) void\n+send_notification_to_ravana(notification : Dict) void\n+notify_user(user_id : str, message : str, platform : str) void\n}\nclass MemoryServiceChannel {\n+str channel_name\n+bool running\n+Dict callbacks\n+start() Coroutine\n+stop() Coroutine\n+send_message(message : CommunicationMessage) bool\n+register_message_callback(message_type : str, callback) void\n}\nclass SharedStateChannel {\n+str channel_name\n+bool running\n+Dict callbacks\n+start() Coroutine\n+stop() Coroutine\n+send_message(message : CommunicationMessage) bool\n+register_message_callback(message_type : str, callback) void\n}\nclass MessageQueueChannel {\n+str channel_name\n+bool running\n+Dict callbacks\n+start() Coroutine\n+stop() Coroutine\n+send_message(message : CommunicationMessage) bool\n+register_message_callback(message_type : str, callback) void\n}\nRAVANACommunicator --> MemoryServiceChannel : \"uses\"\nRAVANACommunicator --> SharedStateChannel : \"uses\"\nRAVANACommunicator --> MessageQueueChannel : \"uses\"\n</code></pre>\n<p><strong>Diagram sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n</ul>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n</ul>\n<h3>Communication Flow Analysis</h3>\n<p>The framework implements a sophisticated message processing pipeline that handles various types of communications with appropriate routing and processing logic.</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\nparticipant RAVANA as RAVANA Main System\nparticipant Communicator as RAVANACommunicator\nparticipant Bot as Platform Bot\nparticipant User as End User\nRAVANA->>Communicator : send_task_to_ravana(task)\nCommunicator->>MessageQueueChannel : Send TASK_RESULT message\nMessageQueueChannel-->>Communicator : Success\nCommunicator->>Communicator : Add to pending_tasks\nNote over Communicator,MessageQueueChannel : Task sent via reliable queue\nUser->>Bot : Sends message\nBot->>Communicator : handle_user_message()\nCommunicator->>RAVANA : Forward message\nRAVANA->>Communicator : Process and respond\nCommunicator->>Bot : Send response\nBot->>User : Deliver response\nRAVANA->>Communicator : _handle_thought_exchange()\nCommunicator->>Communicator : Process thought type\nalt Insight\nCommunicator->>Communicator : _process_ravana_insight()\nCommunicator->>Bot : Send insight to user\nend\nalt Goal Adjustment\nCommunicator->>Communicator : _process_goal_adjustment()\nCommunicator->>Bot : Notify user of goal change\nend\nalt Collaboration Proposal\nCommunicator->>Communicator : _process_collaboration_proposal()\nCommunicator->>Bot : Share collaboration idea\nend\n</code></pre>\n<p><strong>Diagram sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n</ul>\n<h2>Communication Message Structure</h2>\n<p>The framework uses a standardized message structure to ensure consistent communication across all components. The CommunicationMessage class defines the format for all inter-system messages.</p>\n<pre><code class=\"language-mermaid\">classDiagram\nclass CommunicationType {\n&#x3C;&#x3C;enumeration>>\nPROPOSAL\nSTATUS_UPDATE\nEMERGENCY\nTHOUGHT_EXCHANGE\nTASK_RESULT\nNOTIFICATION\nUSER_MESSAGE\n}\nclass Priority {\n&#x3C;&#x3C;enumeration>>\nLOW\nMEDIUM\nHIGH\nCRITICAL\n}\nclass CommunicationMessage {\n+str id\n+CommunicationType type\n+Priority priority\n+datetime timestamp\n+str sender\n+str recipient\n+str subject\n+Dict content\n+bool requires_response\n+Optional[int] response_timeout\n+to_dict() Dict\n+from_dict(data : Dict) CommunicationMessage\n}\nclass UserPlatformProfile {\n+str user_id\n+str last_platform\n+str platform_user_id\n+Dict preferences\n+datetime last_interaction\n+to_dict() Dict\n+from_dict(data : Dict) UserPlatformProfile\n}\nCommunicationMessage --> CommunicationType : \"has type\"\nCommunicationMessage --> Priority : \"has priority\"\n</code></pre>\n<p><strong>Diagram sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/data_models.py</a></li>\n</ul>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/data_models.py</a></li>\n</ul>\n<h2>Integration Patterns</h2>\n<p>The framework supports several integration patterns for connecting with the main RAVANA system and external platforms:</p>\n<h3>Task Delegation Pattern</h3>\n<p>When the conversational AI needs to delegate a task to the main system:</p>\n<pre><code class=\"language-python\">task = {\n    \"task_id\": \"task_123\",\n    \"task_description\": \"Analyze user sentiment\",\n    \"parameters\": {\n        \"user_id\": \"user_456\",\n        \"conversation_history\": [...]\n    }\n}\ncommunicator.send_task_to_ravana(task)\n</code></pre>\n<h3>Thought Exchange Pattern</h3>\n<p>For sharing insights and cognitive processes between systems:</p>\n<pre><code class=\"language-python\">thought = {\n    \"thought_type\": \"insight\",\n    \"payload\": {\n        \"description\": \"Noticed user prefers concise responses\",\n        \"evidence\": \"User frequently interrupts long messages\"\n    },\n    \"metadata\": {\n        \"user_id\": \"user_456\",\n        \"timestamp\": \"2024-01-15T10:30:00\"\n    }\n}\ncommunicator.send_thought_to_ravana(thought)\n</code></pre>\n<h3>Emotional Context Synchronization</h3>\n<p>To maintain emotional continuity across system boundaries:</p>\n<pre><code class=\"language-python\">emotional_data = {\n    \"user_id\": \"user_456\",\n    \"current_mood\": \"frustrated\",\n    \"mood_intensity\": 0.7,\n    \"detected_cues\": [\"short_responses\", \"exclamation_points\"],\n    \"recommended_response_style\": \"empathetic\"\n}\ncommunicator.send_emotional_context_to_ravana(emotional_data)\n</code></pre>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n<li><a>modules/conversational_ai/communication/data_models.py</a></li>\n</ul>\n<h2>Troubleshooting Guide</h2>\n<p>Common issues and their solutions when working with the Conversational AI Communication Framework:</p>\n<h3>Connection Issues</h3>\n<p><strong>Symptom</strong>: RAVANACommunicator fails to start or maintain connection\n<strong>Solution</strong>:</p>\n<ul>\n<li>Verify the IPC channel name matches in both systems</li>\n<li>Check that required services are running</li>\n<li>Ensure proper permissions for communication channels</li>\n</ul>\n<h3>Message Delivery Failures</h3>\n<p><strong>Symptom</strong>: Messages are not being delivered or processed\n<strong>Solution</strong>:</p>\n<ul>\n<li>Check the message queue for backlog</li>\n<li>Verify message callbacks are properly registered</li>\n<li>Confirm message format adheres to CommunicationMessage structure</li>\n<li>Review logs for serialization errors</li>\n</ul>\n<h3>Platform Integration Problems</h3>\n<p><strong>Symptom</strong>: Discord or Telegram bots not responding\n<strong>Solution</strong>:</p>\n<ul>\n<li>Validate API tokens in config.json</li>\n<li>Check platform-specific configuration settings</li>\n<li>Ensure bot has necessary permissions in the server/channel</li>\n<li>Verify network connectivity to platform APIs</li>\n</ul>\n<h3>Performance Issues</h3>\n<p><strong>Symptom</strong>: High latency in message processing\n<strong>Solution</strong>:</p>\n<ul>\n<li>Monitor message queue size and processing rate</li>\n<li>Consider increasing message_timeout in configuration</li>\n<li>Review the number of pending tasks</li>\n<li>Optimize message content size</li>\n</ul>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>modules/conversational_ai/config.json</a></li>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n<li><a>modules/conversational_ai/bots/discord_bot.py</a></li>\n<li><a>modules/conversational_ai/bots/telegram_bot.py</a></li>\n</ul>\n<h2>Conclusion</h2>\n<p>The Conversational AI Communication Framework provides a robust foundation for building intelligent, multi-platform conversational agents. Its modular architecture, standardized message formats, and comprehensive error handling make it suitable for complex AI coordination scenarios. The framework effectively bridges the gap between the cognitive capabilities of the main RAVANA system and user-facing communication platforms, enabling seamless interaction through multiple channels. By following the documented integration patterns and troubleshooting guidelines, developers can successfully implement and maintain sophisticated conversational AI applications.</p>\n<p><strong>Referenced Files in This Document</strong></p>\n<ul>\n<li><a>modules/conversational_ai/config.json</a></li>\n<li><a>modules/conversational_ai/communication/ravana_bridge.py</a></li>\n<li><a>modules/conversational_ai/communication/data_models.py</a></li>\n<li><a>modules/conversational_ai/main.py</a></li>\n<li><a>modules/conversational_ai/bots/discord_bot.py</a></li>\n<li><a>modules/conversational_ai/bots/telegram_bot.py</a></li>\n</ul>\n"},"docs":[{"slug":"Action System","title":"Action System"},{"slug":"API Reference","title":"API Reference"},{"slug":"Architecture & Design","title":"Architecture & Design"},{"slug":"Configuration","title":"Configuration"},{"slug":"Conversational AI Communication Framework","title":"Conversational AI Communication Framework"},{"slug":"Core System","title":"Core System"},{"slug":"Database Schema","title":"Database Schema"},{"slug":"Decision-Making System","title":"Decision-Making System"},{"slug":"Deployment & Operations","title":"Deployment & Operations"},{"slug":"Development Guide","title":"Development Guide"},{"slug":"Emotional Intelligence","title":"Emotional Intelligence"},{"slug":"Enhanced Snake Agent","title":"Enhanced Snake Agent"},{"slug":"Enhanced Snake Agent Architecture","title":"Enhanced Snake Agent Architecture"},{"slug":"Graceful Shutdown","title":"Graceful Shutdown"},{"slug":"LLM Integration","title":"LLM Integration"},{"slug":"Memory Systems","title":"Memory Systems"},{"slug":"Multi-Modal Memory","title":"Multi-Modal Memory"},{"slug":"Project Overview","title":"Project Overview"},{"slug":"Self-Improvement","title":"Self-Improvement"},{"slug":"Services","title":"Services"},{"slug":"Snake Agent Configuration","title":"Snake Agent Configuration"},{"slug":"Specialized Modules-57f9b30b-b165-48d3-8e89-196940d26190","title":"Specialized Modules"},{"slug":"Specialized Modules","title":"Specialized Modules"}]},"__N_SSG":true}