{"pageProps":{"doc":{"slug":"Development Guide","title":"Development Guide","content":"<h1>Development Guide</h1>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#project-structure\">Project Structure</a></li>\n<li><a href=\"#setup-and-environment-configuration\">Setup and Environment Configuration</a></li>\n<li><a href=\"#adding-new-actions-using-the-registry-pattern\">Adding New Actions Using the Registry Pattern</a></li>\n<li><a href=\"#creating-new-modules\">Creating New Modules</a></li>\n<li><a href=\"#testing-procedures-and-best-practices\">Testing Procedures and Best Practices</a></li>\n<li><a href=\"#debugging-and-logging\">Debugging and Logging</a></li>\n<li><a href=\"#contribution-guidelines\">Contribution Guidelines</a></li>\n<li><a href=\"#common-pitfalls-and-integration-challenges\">Common Pitfalls and Integration Challenges</a></li>\n<li><a href=\"#recommended-tools-and-ide-setup\">Recommended Tools and IDE Setup</a></li>\n</ol>\n<h2>Introduction</h2>\n<p>This Development Guide provides comprehensive instructions for developers contributing to the RAVANA AGI project. It covers setup, module creation, action registration, testing, debugging, and contribution workflows. The guide is designed to help developers understand the system's architecture and best practices for extending its functionality.</p>\n<h2>Project Structure</h2>\n<p>The RAVANA project follows a modular architecture with clearly defined components. The main directories include:</p>\n<ul>\n<li><strong>core</strong>: Contains the central system logic, action management, and state handling</li>\n<li><strong>modules</strong>: Houses specialized functional modules like self-reflection, decision engine, and emotional intelligence</li>\n<li><strong>services</strong>: Provides data, memory, knowledge, and multi-modal services</li>\n<li><strong>database</strong>: Manages database engine and models</li>\n<li><strong>tests</strong>: Includes unit, integration, and validation tests</li>\n<li><strong>prompts</strong>: Stores prompt templates for various system functions</li>\n</ul>\n<pre><code class=\"language-mermaid\">graph TB\nsubgraph \"Core System\"\nActionManager[Action Manager]\nActionRegistry[Action Registry]\nSystem[AGI System]\nState[State Management]\nend\nsubgraph \"Modules\"\nSelfReflection[Self-Reflection]\nDecisionEngine[Decision Engine]\nEmotionalIntelligence[Emotional Intelligence]\nCuriosityTrigger[Curiosity Trigger]\nend\nsubgraph \"Services\"\nDataService[Data Service]\nMemoryService[Memory Service]\nKnowledgeService[Knowledge Service]\nend\nsubgraph \"External\"\nDatabase[(Database)]\nLLM[(LLM)]\nend\nActionManager --> ActionRegistry\nSystem --> ActionManager\nSystem --> State\nSystem --> SelfReflection\nSystem --> DecisionEngine\nSystem --> EmotionalIntelligence\nSystem --> CuriosityTrigger\nSelfReflection --> MemoryService\nDecisionEngine --> DataService\nEmotionalIntelligence --> State\nCuriosityTrigger --> System\nDataService --> Database\nMemoryService --> Database\nKnowledgeService --> LLM\nActionManager --> LLM\n</code></pre>\n<p><strong>Diagram sources</strong></p>\n<ul>\n<li><a>README.md</a></li>\n<li><a>core/action_manager.py</a></li>\n</ul>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>README.md</a></li>\n</ul>\n<h2>Setup and Environment Configuration</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.13 or higher</li>\n<li>uv (Python package manager)</li>\n</ul>\n<h3>Installation</h3>\n<pre><code class=\"language-bash\">git clone https://github.com/OpenSource-Syndicate/RAVANA.git\ncd RAVANA\nuv venv\n# Activate virtual environment:\n# Windows: .venv\\Scripts\\activate\n# macOS/Linux: source .venv/bin/activate\nuv pip install -e .\n</code></pre>\n<h3>Dependency Management</h3>\n<p>The project uses <code>pyproject.toml</code> for dependency management. Core dependencies include:</p>\n<ul>\n<li><strong>AI/ML</strong>: torch, transformers, langchain, sentence-transformers</li>\n<li><strong>Database</strong>: asyncpg, psycopg2-binary, pgvector, chromadb</li>\n<li><strong>Web/API</strong>: fastapi, aiohttp, uvicorn</li>\n<li><strong>Utilities</strong>: numpy, pandas, watchdog, python-json-logger</li>\n</ul>\n<p>Optional dependencies are available for conversational AI:</p>\n<pre><code class=\"language-toml\">[project.optional-dependencies]\nconversational-ai = [\n    \"discord.py>=2.0.0\",\n    \"python-telegram-bot>=20.0\",\n]\n</code></pre>\n<h3>Running the System</h3>\n<pre><code class=\"language-bash\">uv run main.py\n</code></pre>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>README.md</a></li>\n<li><a>pyproject.toml</a></li>\n</ul>\n<h2>Adding New Actions Using the Registry Pattern</h2>\n<p>The action registry pattern enables dynamic registration and management of executable behaviors within the AGI system.</p>\n<h3>Action Registry Implementation</h3>\n<p>The <code>ActionRegistry</code> class manages all available actions:</p>\n<pre><code class=\"language-python\">class ActionRegistry:\n    def __init__(self, system: 'AGISystem', data_service: 'DataService') -> None:\n        self.actions: Dict[str, Action] = {}\n        # Pre-register core actions\n        self._register_action(ProposeAndTestInventionAction(system, data_service))\n        self._register_action(LogMessageAction(system, data_service))\n        # ... other actions\n</code></pre>\n<h3>Creating a New Action</h3>\n<ol>\n<li>Create a new Python file in <code>core/actions/</code> (e.g., <code>my_action.py</code>)</li>\n<li>Implement the action by extending the <code>Action</code> base class:</li>\n</ol>\n<pre><code class=\"language-python\">from core.actions.action import Action\nfrom typing import Any, Dict, List\n\nclass MyCustomAction(Action):\n    def __init__(self, system: 'AGISystem', data_service: 'DataService'):\n        super().__init__(system, data_service)\n\n    @property\n    def name(self) -> str:\n        return \"my_custom_action\"\n\n    @property\n    def description(self) -> str:\n        return \"Performs a custom operation defined by the developer.\"\n\n    @property\n    def parameters(self) -> List[Dict[str, Any]]:\n        return [\n            {\n                \"name\": \"parameter_name\",\n                \"type\": \"string\",\n                \"description\": \"Description of the parameter\",\n                \"required\": True,\n            }\n        ]\n\n    async def execute(self, **kwargs: Any) -> Any:\n        # Validate parameters\n        self.validate_params(kwargs)\n        \n        # Implement action logic here\n        parameter_value = kwargs.get(\"parameter_name\")\n        \n        # Return result\n        return {\"status\": \"success\", \"message\": f\"Executed with {parameter_value}\"}\n</code></pre>\n<h3>Registering the Action</h3>\n<p>Add the action to the registry in <code>core/actions/registry.py</code>:</p>\n<pre><code class=\"language-python\">from core.actions.my_action import MyCustomAction\n\n# In ActionRegistry.__init__():\nself._register_action(MyCustomAction(system, data_service))\n</code></pre>\n<h3>Action Execution Flow</h3>\n<pre><code class=\"language-mermaid\">sequenceDiagram\nparticipant System as AGI System\nparticipant AM as ActionManager\nparticipant Registry as ActionRegistry\nparticipant Action as MyCustomAction\nSystem->>AM : execute_action(\"my_custom_action\", params)\nAM->>Registry : get_action(\"my_custom_action\")\nRegistry-->>AM : Action instance\nAM->>Action : validate_params(params)\nAM->>Action : execute(**params)\nAction-->>AM : result\nAM->>AM : log_action_execution()\nAM-->>System : result\n</code></pre>\n<p><strong>Diagram sources</strong></p>\n<ul>\n<li><a>core/actions/registry.py</a></li>\n<li><a>core/action_manager.py</a></li>\n</ul>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>core/actions/registry.py</a></li>\n<li><a>core/actions/action.py</a></li>\n</ul>\n<h2>Creating New Modules</h2>\n<p>The system supports modular extensions that can be developed independently.</p>\n<h3>Module Structure</h3>\n<p>A typical module follows this structure:</p>\n<pre><code>modules/my_module/\n├── main.py\n├── pyproject.toml\n├── requirements.txt\n├── my_module.py\n└── test_my_module.py\n</code></pre>\n<h3>Module Implementation</h3>\n<p>Using the agent_self_reflection module as a template:</p>\n<ol>\n<li><strong>Create main.py</strong>: Entry point with command-line interface</li>\n</ol>\n<pre><code class=\"language-python\">def main():\n    import argparse\n    parser = argparse.ArgumentParser(description=\"Module Description\")\n    subparsers = parser.add_subparsers(dest=\"command\", help=\"Command to run\")\n    \n    # Add subcommands\n    reflect_parser = subparsers.add_parser('reflect', help='Generate a reflection')\n    reflect_parser.add_argument('--task', type=str, required=True)\n    reflect_parser.add_argument('--outcome', type=str, required=True)\n    \n    args = parser.parse_args()\n    \n    if args.command == 'reflect':\n        result = reflect_on_task(args.task, args.outcome)\n        print(json.dumps(result, indent=2))\n</code></pre>\n<ol start=\"2\">\n<li><strong>Define dependencies</strong> in pyproject.toml:</li>\n</ol>\n<pre><code class=\"language-toml\">[project]\nname = \"my-module\"\nversion = \"0.1.0\"\nrequires-python = \">=3.13\"\ndependencies = [\n    \"google-genai>=1.23.0\",\n    \"openai>=1.93.0\",\n    \"requests>=2.32.4\",\n]\n</code></pre>\n<ol start=\"3\">\n<li><strong>List specific package versions</strong> in requirements.txt (generated from dependency resolution)</li>\n</ol>\n<h3>Module Integration</h3>\n<p>Modules can integrate with core services:</p>\n<ul>\n<li>Import core components: <code>from core.llm import call_llm</code></li>\n<li>Access shared state: <code>from core.state import SharedState</code></li>\n<li>Use data services: <code>from services.data_service import DataService</code></li>\n</ul>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>modules/agent_self_reflection/main.py</a></li>\n<li><a>modules/agent_self_reflection/pyproject.toml</a></li>\n<li><a>modules/agent_self_reflection/requirements.txt</a></li>\n</ul>\n<h2>Testing Procedures and Best Practices</h2>\n<p>The project includes a comprehensive testing framework using pytest.</p>\n<h3>Test Structure</h3>\n<p>Tests are organized in the <code>tests/</code> directory with naming convention <code>test_&#x3C;component>.py</code>.</p>\n<h3>Writing Unit Tests</h3>\n<p>Example test structure from test_system.py:</p>\n<pre><code class=\"language-python\">import pytest\nimport asyncio\nfrom unittest.mock import AsyncMock, MagicMock\n\nfrom core.system import AGISystem\n\n@pytest.fixture\ndef agi_system(mock_engine):\n    return AGISystem(mock_engine)\n\n@pytest.mark.asyncio\nasync def test_agi_system_initialization(agi_system):\n    assert agi_system is not None\n    assert isinstance(agi_system.shared_state, SharedState)\n\n@pytest.mark.asyncio\nasync def test_execute_action_unknown_action(agi_system):\n    decision = {\"action\": \"unknown_action\", \"params\": {}}\n    output = await agi_system.execute_action(decision)\n    assert output == \"No action taken.\"\n</code></pre>\n<h3>Test Types</h3>\n<ul>\n<li><strong>Unit tests</strong>: Test individual components in isolation</li>\n<li><strong>Integration tests</strong>: Verify interactions between components</li>\n<li><strong>Validation scripts</strong>: Check structural completeness (e.g., validate_memory_integration_manager.py)</li>\n<li><strong>End-to-end tests</strong>: Test complete workflows</li>\n</ul>\n<h3>Testing Best Practices</h3>\n<ol>\n<li>Use <code>pytest.mark.asyncio</code> for asynchronous tests</li>\n<li>Mock external dependencies using <code>unittest.mock</code></li>\n<li>Test edge cases and error handling</li>\n<li>Include test coverage for critical paths</li>\n<li>Use descriptive test names that explain the scenario</li>\n</ol>\n<h3>Running Tests</h3>\n<pre><code class=\"language-bash\"># Run all tests\npytest\n\n# Run specific test file\npytest tests/test_system.py\n\n# Run with verbose output\npytest -v\n</code></pre>\n<p><strong>Section sources</strong></p>\n<ul>\n<li><a>tests/test_system.py</a></li>\n</ul>\n<h2>Debugging and Logging</h2>\n<h3>Logging Configuration</h3>\n<p>The system uses Python's logging module with structured logging via python-json-logger.</p>\n<h3>Debugging Techniques</h3>\n<ol>\n<li><strong>Enable verbose logging</strong>: Check log files in the system's logging directory</li>\n<li><strong>Use breakpoints</strong>: Add <code>import pdb; pdb.set_trace()</code> in code</li>\n<li><strong>Analyze action logs</strong>: Review saved action logs in the database</li>\n<li><strong>Monitor state changes</strong>: Track shared state modifications</li>\n</ol>\n<h3>Performance Profiling</h3>\n<ol>\n<li>Use Python's cProfile for performance analysis</li>\n<li>Monitor memory usage with psutil</li>\n<li>Track action execution times in logs</li>\n<li>Use the built-in performance monitoring in VLTM components</li>\n</ol>\n<h2>Contribution Guidelines</h2>\n<h3>Code Style</h3>\n<ul>\n<li>Follow PEP 8 guidelines</li>\n<li>Use type hints for all functions and variables</li>\n<li>Write comprehensive docstrings</li>\n<li>Keep functions focused and small</li>\n</ul>\n<h3>Pull Request Workflow</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Create a feature branch</li>\n<li>Implement changes with tests</li>\n<li>Ensure all tests pass</li>\n<li>Submit pull request with detailed description</li>\n</ol>\n<h3>Code Review Expectations</h3>\n<ul>\n<li>Clear documentation of changes</li>\n<li>Appropriate test coverage</li>\n<li>No breaking changes without justification</li>\n<li>Performance considerations addressed</li>\n</ul>\n<h2>Common Pitfalls and Integration Challenges</h2>\n<h3>Common Issues</h3>\n<ul>\n<li><strong>Circular imports</strong>: Avoid importing from modules that depend on core</li>\n<li><strong>Async/sync mixing</strong>: Ensure proper async handling in coroutines</li>\n<li><strong>Dependency conflicts</strong>: Use uv to manage dependencies</li>\n<li><strong>Memory leaks</strong>: Properly manage object lifecycles</li>\n</ul>\n<h3>Integration Challenges</h3>\n<ul>\n<li><strong>State synchronization</strong>: Ensure shared state is properly coordinated</li>\n<li><strong>Action naming conflicts</strong>: Use unique action names</li>\n<li><strong>Database schema changes</strong>: Handle migrations carefully</li>\n<li><strong>LLM response parsing</strong>: Validate and sanitize LLM outputs</li>\n</ul>\n<h2>Recommended Tools and IDE Setup</h2>\n<h3>Development Tools</h3>\n<ul>\n<li><strong>IDE</strong>: VS Code or PyCharm</li>\n<li><strong>Python Manager</strong>: uv</li>\n<li><strong>Testing</strong>: pytest, pytest-asyncio</li>\n<li><strong>Formatting</strong>: black, isort</li>\n<li><strong>Linting</strong>: flake8, mypy</li>\n</ul>\n<h3>IDE Configuration</h3>\n<ol>\n<li>Set up virtual environment interpreter</li>\n<li>Install Python extension (VS Code) or configure project SDK (PyCharm)</li>\n<li>Enable linting and type checking</li>\n<li>Configure test discovery for pytest</li>\n<li>Set up debugging configuration for main.py</li>\n</ol>\n<h3>Productivity Tips</h3>\n<ul>\n<li>Use code snippets for common patterns</li>\n<li>Configure auto-format on save</li>\n<li>Set up test runners in IDE</li>\n<li>Use version control integration</li>\n<li>Enable Git pre-commit hooks for linting</li>\n</ul>\n<p><strong>Referenced Files in This Document</strong></p>\n<ul>\n<li><a>README.md</a></li>\n<li><a>pyproject.toml</a></li>\n<li><a>core/actions/registry.py</a></li>\n<li><a>core/actions/action.py</a></li>\n<li><a>core/action_manager.py</a></li>\n<li><a>modules/agent_self_reflection/main.py</a></li>\n<li><a>modules/agent_self_reflection/pyproject.toml</a></li>\n<li><a>modules/agent_self_reflection/requirements.txt</a></li>\n<li><a>tests/test_system.py</a></li>\n</ul>\n"},"docs":[{"slug":"Action System","title":"Action System"},{"slug":"API Reference","title":"API Reference"},{"slug":"Architecture & Design","title":"Architecture & Design"},{"slug":"Configuration","title":"Configuration"},{"slug":"Conversational AI Communication Framework","title":"Conversational AI Communication Framework"},{"slug":"Core System","title":"Core System"},{"slug":"Database Schema","title":"Database Schema"},{"slug":"Decision-Making System","title":"Decision-Making System"},{"slug":"Deployment & Operations","title":"Deployment & Operations"},{"slug":"Development Guide","title":"Development Guide"},{"slug":"Emotional Intelligence","title":"Emotional Intelligence"},{"slug":"Enhanced Snake Agent","title":"Enhanced Snake Agent"},{"slug":"Enhanced Snake Agent Architecture","title":"Enhanced Snake Agent Architecture"},{"slug":"Graceful Shutdown","title":"Graceful Shutdown"},{"slug":"LLM Integration","title":"LLM Integration"},{"slug":"Memory Systems","title":"Memory Systems"},{"slug":"Multi-Modal Memory","title":"Multi-Modal Memory"},{"slug":"Project Overview","title":"Project Overview"},{"slug":"Self-Improvement","title":"Self-Improvement"},{"slug":"Services","title":"Services"},{"slug":"Snake Agent Configuration","title":"Snake Agent Configuration"},{"slug":"Specialized Modules-57f9b30b-b165-48d3-8e89-196940d26190","title":"Specialized Modules"},{"slug":"Specialized Modules","title":"Specialized Modules"}]},"__N_SSG":true}